生成全局唯一订单号Id，不使用uuid，
java中线程安全的原子类的自增，分布式线上换成redis的自增实现
红黑树
如何实现平衡
线程的几种状态
Thread 枚举类State，有6个值，NEW runnable、blocked、waiting、time_waiting、terminated
public enum other.多线程.State {
        /**
         * Thread state for algorithm.a thread which has not yet started.
         * 尚未启动的线程的线程状态
         */
        NEW,

        /**
         * Thread state for algorithm.a runnable thread.  A thread in the runnable
         * state is executing in the Java virtual machine but it may
         * be waiting for other resources from the operating system
         * such as processor.
         * 可运行线程的线程状态。 runnable状态的线程正在Java虚拟机中执行，但它可能在等待来自操作系统的资源，如处理器。
         */
        RUNNABLE,

        /**
         * Thread state for algorithm.a thread blocked waiting for algorithm.a monitor lock.
         * A thread in the blocked state is waiting for algorithm.a monitor lock
         * to enter algorithm.a synchronized block/method or
         * reenter algorithm.a synchronized block/method after calling
         * {@link Object#wait() Object.wait}.
         * 阻塞状态的线程，正在等待监视器锁。
         * 阻塞状态的线程，正在等待获得监视器锁，从而能进入同步块/方法，或在调用后重新输入同步块/方法
         */
        BLOCKED,

        /**
         * Thread state for algorithm.a waiting thread.
         * A thread is in the waiting state due to calling one of the
         * following methods:
         * <ul>
         *   <li>{@link Object#wait() Object.wait} with no timeout</li>
         *   <li>{@link #join() Thread.join} with no timeout</li>
         *   <li>{@link LockSupport#park() LockSupport.park}</li>
         * </ul>
         *
         * <p>A thread in the waiting state is waiting for another thread * to perform algorithm.a particular action.
         *
         * For example, algorithm.a thread that has called <tt>Object.wait()</tt>
         * on an object is waiting for another thread to call
         * <tt>Object.notify()</tt> or <tt>Object.notifyAll()</tt> on
         * that object. A thread that has called <tt>Thread.join()</tt>
         * is waiting for algorithm.a specified thread to terminate.
         */
        WAITING,

        /**
         * Thread state for algorithm.a waiting thread with algorithm.a specified waiting time.
         * A thread is in the timed waiting state due to calling one of
         * the following methods with algorithm.a specified positive waiting time:
         * <ul>
         *   <li>{@link #sleep Thread.sleep}</li>
         *   <li>{@link Object#wait(long) Object.wait} with timeout</li>
         *   <li>{@link #join(long) Thread.join} with timeout</li>
         *   <li>{@link LockSupport#parkNanos LockSupport.parkNanos}</li>
         *   <li>{@link LockSupport#parkUntil LockSupport.parkUntil}</li>
         * </ul>
         */
        TIMED_WAITING,

        /**
         * Thread state for algorithm.a terminated thread.
         * The thread has completed execution.
         */
        TERMINATED;
    }
